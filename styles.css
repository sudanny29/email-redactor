```css
:root {
  --background: #f0f5ff;
  --foreground: #111111;
  --card: #ffffff;
  --card-foreground: #111111;
  --primary: #3b82f6;
  --primary-hover: #2563eb;
  --primary-foreground: #ffffff;
  --muted: #f1f5f9;
  --muted-foreground: #64748b;
  --accent: #f1f5f9;
  --accent-foreground: #0f172a;
  --border: #e2e8f0;
  --input: #e2e8f0;
  --ring: #3b82f6;
  --radius: 0.5rem;
  --surface: #f8fafc;
}

.dark {
  --background: #0b0c10;
  --foreground: #f8fafc;
  --card: #1e1e2e;
  --card-foreground: #f8fafc;
  --primary: #3b82f6;
  --primary-hover: #2563eb;
  --primary-foreground: #ffffff;
  --muted: #1e293b;
  --muted-foreground: #94a3b8;
  --accent: #1e293b;
  --accent-foreground: #f8fafc;
  --border: #1e293b;
  --input: #1e293b;
  --ring: #3b82f6;
  --surface: #1e293b;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  background-color: var(--background);
  color: var(--foreground);
  line-height: 1.5;
  transition: background-color 0.3s, color 0.3s;
}

.container {
  max-width: 768px;
  margin: 0 auto;
  padding: 2rem 1rem;
}

header {
  text-align: center;
  margin-bottom: 2rem;
  position: relative;
}

.theme-toggle {
  position: absolute;
  top: 0;
  right: 0;
}

.theme-toggle button {
  background: var(--card);
  border: 1px solid var(--border);
  color: var(--card-foreground);
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s;
}

.theme-toggle button:hover {
  background: var(--muted);
}

h1 {
  font-size: 1.875rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
  color: var(--foreground);
}

header p {
  color: var(--muted-foreground);
  max-width: 42rem;
  margin: 0 auto;
}

.email-form {
  background-color: var(--card);
  border-radius: var(--radius);
  padding: 1.5rem;
  margin-bottom: 2rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  animation: fadeIn 0.3s ease-in-out;
  transition: background-color 0.3s;
}

label {
  display: block;
  font-size: 0.875rem;
  font-weight: 500;
  margin-bottom: 0.5rem;
  color: var(--foreground);
}

.input-group {
  display: flex;
  gap: 0.5rem;
}

input {
  flex: 1;
  height: 40px;
  padding: 0 0.75rem;
  background-color: var(--surface);
  border: 1px solid var(--input);
  border-radius: var(--radius);
  color: var(--foreground);
  font-size: 0.875rem;
  outline: none;
  transition: border-color 0.3s, box-shadow 0.3s, background-color 0.3s;
}

input:focus {
  border-color: var(--ring);
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
}

button {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  height: 40px;
  padding: 0 1.25rem;
  background-color: var(--primary);
  color: var(--primary-foreground);
  border: none;
  border-radius: var(--radius);
  font-weight: 500;
  font-size: 0.875rem;
  cursor: pointer;
  transition: background-color 0.2s;
}

button:hover {
  background-color: var(--primary-hover);
}

.error {
  color: #ef4444;
  font-size: 0.875rem;
  margin-top: 0.5rem;
}

.results {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.empty-state {
  text-align: center;
  padding: 2.5rem 0;
  color: var(--muted-foreground);
}

.empty-state svg {
  opacity: 0.3;
  margin-bottom: 0.75rem;
}

.email-card {
  background-color: var(--card);
  border-radius: var(--radius);
  padding: 1rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  display: flex;
  justify-content: space-between;
  align-items: center;
  animation: fadeIn 0.3s ease-in-out;
  transition: opacity 0.3s, transform 0.3s, background-color 0.3s;
}

.email-info {
  display: flex;
  flex-direction: column;
}

.email-label {
  font-size: 0.75rem;
  color: var(--muted-foreground);
}

.email-value {
  font-weight: 500;
  color: var(--foreground);
}

.email-buttons {
  display: flex;
  gap: 0.5rem;
}

.icon-button {
  width: 32px;
  height: 32px;
  padding: 0;
  border-radius: 50%;
  background-color: var(--muted);
  color: var(--muted-foreground);
}

.icon-button:hover {
  background-color: var(--accent);
  color: var(--accent-foreground);
}

.removing {
  opacity: 0;
  transform: translateY(8px);
}

.toast {
  position: fixed;
  bottom: 1rem;
  left: 50%;
  transform: translateX(-50%);
  background-color: var(--card);
  color: var(--card-foreground);
  padding: 0.75rem 1rem;
  border-radius: var(--radius);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  z-index: 50;
  animation: fadeIn 0.2s ease-out;
}

.hidden {
  display: none;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(8px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Mobile responsive adjustments */
@media (max-width: 640px) {
  .input-group {
    flex-direction: column;
  }
  
  button {
    width: 100%;
  }
  
  .email-card {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.75rem;
  }
  
  .email-buttons {
    width: 100%;
    justify-content: flex-end;
  }
}
```

## Step 4: Add the JavaScript file (script.js)

```javascript
// Theme handling
const themeToggleBtn = document.getElementById('theme-toggle-btn');
const moonIcon = document.getElementById('moon-icon');
const sunIcon = document.getElementById('sun-icon');

// Initialize theme
function initTheme() {
  const savedTheme = localStorage.getItem('theme');
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  
  if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
    document.documentElement.classList.add('dark');
    moonIcon.classList.add('hidden');
    sunIcon.classList.remove('hidden');
  }
}

initTheme();

// Toggle theme
themeToggleBtn.addEventListener('click', () => {
  const isDark = document.documentElement.classList.toggle('dark');
  
  if (isDark) {
    moonIcon.classList.add('hidden');
    sunIcon.classList.remove('hidden');
    localStorage.setItem('theme', 'dark');
  } else {
    moonIcon.classList.remove('hidden');
    sunIcon.classList.add('hidden');
    localStorage.setItem('theme', 'light');
  }
});

// Email redaction functionality
const form = document.getElementById('redact-form');
const emailInput = document.getElementById('email-input');
const errorMessage = document.getElementById('error-message');
const resultsContainer = document.getElementById('results-container');
const emptyState = document.getElementById('empty-state');
const emailsList = document.getElementById('emails-list');
const toast = document.getElementById('toast');
const toastMessage = document.getElementById('toast-message');

// Validate email format
function validateEmail(email) {
  const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return regex.test(email);
}

// Redact email showing only the domain and three characters
function redactEmail(email, randomize = false) {
  const [localPart, domain] = email.split('@');
  
  if (!randomize) {
    // Default behavior - show first three characters
    const visiblePart = localPart.substring(0, 3);
    const hiddenPart = '*'.repeat(Math.max(0, localPart.length - 3));
    return `${visiblePart}${hiddenPart}@${domain}`;
  } else {
    // Randomized behavior - show three random characters
    if (localPart.length <= 3) {
      // If local part is 3 or fewer characters, just show it all
      return `${localPart}@${domain}`;
    }
    
    // Create an array of character positions
    const positions = Array.from({ length: localPart.length }, (_, i) => i);
    
    // Shuffle the positions array
    for (let i = positions.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [positions[i], positions[j]] = [positions[j], positions[i]];
    }
    
    // Select the first 3 positions to be visible
    const visiblePositions = positions.slice(0, 3).sort((a, b) => a - b);
    
    // Create the redacted email
    let result = '';
    for (let i = 0; i < localPart.length; i++) {
      if (visiblePositions.includes(i)) {
        result += localPart[i];
      } else {
        result += '*';
      }
    }
    
    return `${result}@${domain}`;
  }
}

// Generate a unique ID
function generateId() {
  return `email-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
}

// Show toast notification
function showToast(message, duration = 3000) {
  toastMessage.textContent = message;
  toast.classList.remove('hidden');
  
  setTimeout(() => {
    toast.classList.add('hidden');
  }, duration);
}

// Create email card element
function createEmailCard(id, original, redacted) {
  const card = document.createElement('div');
  card.className = 'email-card';
  card.dataset.id = id;
  
  card.innerHTML = `
    <div class="email-info">
      <span class="email-label">Original:</span>
      <span class="email-value">${original}</span>
      <span class="email-label">Redacted:</span>
      <span class="email-value redacted-value">${redacted}</span>
    </div>
    <div class="email-buttons">
      <button class="icon-button refresh-btn" title="Scramble the visible characters">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5"></path><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path><path d="M3 21v-5h5"></path></svg>
      </button>
      <button class="icon-button copy-btn" title="Copy to clipboard">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path></svg>
      </button>
      <button class="icon-button delete-btn" title="Remove">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
      </button>
    </div>
  `;
  
  // Copy button event
  card.querySelector('.copy-btn').addEventListener('click', async () => {
    try {
      await navigator.clipboard.writeText(redacted);
      showToast('Copied to clipboard!');
    } catch (err) {
      showToast('Failed to copy to clipboard');
    }
  });
  
  // Refresh button event
  card.querySelector('.refresh-btn').addEventListener('click', () => {
    const newRedacted = redactEmail(original, true);
    card.querySelector('.redacted-value').textContent = newRedacted;
    showToast('Email scrambled!');
  });
  
  // Delete button event
  card.querySelector('.delete-btn').addEventListener('click', () => {
    card.classList.add('removing');
    setTimeout(() => {
      card.remove();
      updateEmptyState();
    }, 300);
  });
  
  return card;
}

// Update empty state visibility
function updateEmptyState() {
  if (emailsList.children.length === 0) {
    emptyState.classList.remove('hidden');
  } else {
    emptyState.classList.add('hidden');
  }
}

// Handle form submission
form.addEventListener('submit', (e) => {
  e.preventDefault();
  
  const email = emailInput.value.trim();
  
  // Reset error state
  errorMessage.classList.add('hidden');
  
  // Validate email
  if (!email) {
    errorMessage.textContent = 'Please enter an email address';
    errorMessage.classList.remove('hidden');
    return;
  }
  
  if (!validateEmail(email)) {
    errorMessage.textContent = 'Please enter a valid email address';
    errorMessage.classList.remove('hidden');
    return;
  }
  
  // Redact email
  const redacted = redactEmail(email);
  
  // Create email card
  const id = generateId();
  const card = createEmailCard(id, email, redacted);
  
  // Add to list
  emailsList.prepend(card);
  
  // Update empty state
  updateEmptyState();
  
  // Clear input
  emailInput.value = '';
  emailInput.focus();
});

// Initial update of empty state
updateEmptyState();
```
